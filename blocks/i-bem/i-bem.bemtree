/* global oninit, Vow */
oninit(function (exports, context) {
    var undef,
        isFunction = function (obj) {
            return typeof obj === 'function';
        };

    function BEMContext (ctx, apply, data) {
        context.BEMContext.call(this, ctx, apply);
        /**
         * @private
         */
        this._apiRequester = data.apiRequester;

        /**
         * @public
         * @type {Route}
         * @see {RouterBase} in router-base npm module
         */
        this.route = data.route;

        /**
         * @public
         * @type {object}
         * @see RequestData request property
         */
        this.request = data.request;

        /**
         * cache for apiRequester#get return values
         * @type {object.<Promise>}
         */
        this._promises = {};
    }

    BEMContext.prototype = Object.create(context.BEMContext.prototype);

    BEMContext.prototype.get = function (route, routeParams, onFulfilled, onRejected) {
        if (routeParams && isFunction(routeParams)) {
            onRejected = onFulfilled;
            onFulfilled = routeParams;
            routeParams = undef;
        }
        var promiseKey = route + (routeParams ? JSON.stringify(routeParams) : ''),
            promises = this._promises,
            promise = promises[promiseKey] = promises[promiseKey] || this._apiRequester.get(route, routeParams);
        return this.doAsync(promise, onFulfilled, onRejected, this);
    };

    /**
     * @param {Function|Promise} fn
     * @param {Function} [onFulfilled]
     * @param {Function} [onRejected]
     * @param {Object} [context]
     * @returns {vow:Promise}
     */
    BEMContext.prototype.doAsync = function doAsync (fn, onFulfilled, onRejected, context) {
        if (onFulfilled && !isFunction(onFulfilled)) {
            context = onFulfilled;
            onFulfilled = undef;
        } else if (onRejected && !isFunction(onRejected)) {
            context = onRejected;
            onRejected = undef;
        }
        context = context || this;

        var mode = this._mode,
            ctx = this.ctx,
            block = this.block,
            elem = this.elem,
            mods = this.mods,
            elemMods = this.elemMods,
            restore = function (response) {
                this._mode = mode;
                this.ctx = ctx;
                this.block = block;
                this.elem = elem;
                this.mods = mods;
                this.elemMods = elemMods;
                return response;
            }.bind(this),
            promise = isFunction(fn) ? Vow.invoke(fn, context) : fn;

        if (onFulfilled) {
            if (onRejected) {
                promise = promise.then(function (response) {
                    restore();
                    return onFulfilled.call(this, response);
                }, function (response) {
                    restore();
                    return onRejected.call(this, response);
                }, context);
            } else {
                promise = promise.then(restore).then(onFulfilled, context);
            }
        }

        this.__queue.push(promise);

        return promise.always(restore);
    };

    var oldApply = context.xjstApply;
    exports.apply = BEMContext.applyAsync = function BEMContext_applyAsync (context, apiRequester) {
        var ctx = new BEMContext(context || this, oldApply, apiRequester);
        ctx._buf = ctx.apply();
        return Vow
            .all(ctx.__queue)
            .then(function () {
                return ctx._buf;
            });
    };

    BEMContext.prototype.reapply = BEMContext.applyAsync;
});

def()(function () {
    var content = apply('content');
    if (content || content === 0) {
        this.ctx.content = apply('', { ctx: content });
    }
    var js = apply('js');
    if (typeof js !== 'undefined') {
        this.ctx.js = js;
    }
    return this.ctx;
});

js()(undefined);
